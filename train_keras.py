'''
@author: Nitish Bhardwaj (nitish11)
Keras Training model for training model and prediction of driver's state
'''

from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Convolution2D, MaxPooling2D
from keras.optimizers import SGD
from keras.utils import np_utils
import os
import cv2
import glob
import numpy as np
from PIL import Image


def load_train_data():
    dirname = "dataset/train"    
    nb_train_samples = 22424
    X_train = np.zeros((nb_train_samples, img_channels, img_rows, img_cols), dtype="uint8")
    Y_train = np.zeros((nb_train_samples, 10), dtype="uint8")

    train_classes = os.listdir(dirname)
    file_start_index = 0
    for i,sub_folder in enumerate(train_classes):
        filenames = glob.glob(os.path.join(dirname, sub_folder)+"/*.jpg")
        file_count = len(filenames)
        file_end_index = file_count + file_start_index
        train_images = [cv2.resize((cv2.imread(f)),(img_cols,img_rows)) for f in filenames]
        train_images = np.transpose(train_images, [0,3,1,2]).astype('float32')[:file_count,:,:,:]
        train_labels = np.zeros((10))
        train_labels[i] = 1
        
        X_train[file_start_index:file_end_index, :, :, :] = train_images
        Y_train[file_start_index:file_end_index,:] = train_labels

        file_start_index += file_count

    return (X_train, Y_train)


def load_test_data():
    dirname = "dataset/test"    
    nb_test_samples = 79726
    X_test = np.zeros((nb_test_samples, img_channels, img_rows, img_cols), dtype="uint8")
    Y_test= np.zeros((nb_test_samples,10), dtype="uint8")

    filenames = glob.glob(dirname+"/*.jpg")
    test_images = [cv2.resize((cv2.imread(f)),(img_cols,img_rows)) for f in filenames]
    test_images = np.transpose(test_images, [0,3,1,2]).astype('float32')[:,:,:,:]

    X_test[:nb_test_samples, :, :, :] = test_images
    return (X_test, Y_test)




batch_size = 100
nb_classes = 10
nb_epoch = 1000
data_augmentation = True

# input image dimensions
img_rows, img_cols = 60, 80
img_channels = 3

(X_train, Y_train) = load_train_data()
#(X_test, Y_test) = load_test_data()
print('X_train shape:', X_train.shape)
print('Y_train shape:', Y_train.shape)

model = Sequential()
model.add(Convolution2D(32, 3, 3, border_mode='same',
                        input_shape=(img_channels, img_rows, img_cols)))
model.add(Activation('relu'))
model.add(Convolution2D(32, 3, 3))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Convolution2D(64, 3, 3, border_mode='same'))
model.add(Activation('relu'))
model.add(Convolution2D(64, 3, 3))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(nb_classes))
model.add(Activation('softmax'))

# let's train the model using SGD + momentum (how original).
sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)
model.compile(loss='categorical_crossentropy',
              optimizer=sgd,
              metrics=['accuracy'])

X_train = X_train.astype('float32')

if not data_augmentation:
    print('Not using data augmentation.')
    model.fit(X_train, Y_train,
              batch_size=batch_size,
              nb_epoch=nb_epoch,
              shuffle=True)
else:
    print('Using real-time data augmentation.')

    # this will do preprocessing and realtime data augmentation
    datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
        horizontal_flip=True,  # randomly flip images
        vertical_flip=False)  # randomly flip images

    # compute quantities required for featurewise normalization
    # (std, mean, and principal components if ZCA whitening is applied)
    datagen.fit(X_train)

    # fit the model on the batches generated by datagen.flow()
    model.fit_generator(datagen.flow(X_train, Y_train,
                        batch_size=batch_size),
                        samples_per_epoch=X_train.shape[0],
                        nb_epoch=nb_epoch)

model.save_weights('my_model_weights.h5')
